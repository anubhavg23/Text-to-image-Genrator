# -*- coding: utf-8 -*-
"""ai text ti image gen.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CBn-pw9LcxS277Ur7YCPXJkPNo5LeNkT

üìå Project Description
This project is an interactive AI-powered text-to-image generator built using Stable Diffusion v1.5 and deployed via Gradio in Google Colab. It allows users to input text prompts and generate high-quality, customizable AI art with fine-tuned control over parameters like image size, generation steps, and style guidance.

The system leverages Hugging Face‚Äôs Diffusers library for Stable Diffusion inference and Gradio for an intuitive web interface, making AI art generation accessible without requiring local GPU resources.



‚ú® Key Features
‚úÖ User-Friendly Web Interface ‚Äì Gradio-based UI for easy interaction
‚úÖ Customizable Image Generation ‚Äì Control over:

Prompt & Negative Prompt (to refine output)

Steps (20-100 for quality/speed trade-off)

Guidance Scale (1-20 for creativity vs. prompt adherence)

Image Dimensions (256x256 to 1024x1024)

Seed Control (for reproducible results)

‚úÖ Optimized for Colab ‚Äì Uses FP16 precision & attention slicing to reduce VRAM usage
‚úÖ Real-Time Preview ‚Äì Displays generated images instantly
‚úÖ Seed Tracking ‚Äì Outputs the generation seed for reproducibility


‚öôÔ∏è Implementation Details
1. Model Loading & Optimization
Model: runwayml/stable-diffusion-v1-5 (FP16 precision)

GPU Acceleration: Runs on Colab‚Äôs T4/A100 GPU

Memory Optimization:
pipe.enable_attention_slicing()  # Reduces VRAM usage
torch.backends.cudnn.benchmark = True  # Speeds up convolutions

python
pipe.enable_attention_slicing()  # Reduces VRAM usage
torch.backends.cudnn.benchmark = True  # Speeds up convolutions
2. Image Generation Pipeline
Takes text prompt + negative prompt

Uses Stable Diffusion‚Äôs pipeline() for inference

Saves output as generated_image.png

3. Gradio UI Components
Inputs:

Text boxes for prompts

Sliders for steps, guidance scale, width, height

Seed input for reproducibility

Outputs:

Rendered image

Used seed for regeneration

4. Deployment in Colab
Uses gr.Blocks() for a structured layout

Launched via demo.launch(share=True) for a public link
"""

!pip install diffusers transformers scipy ftfy accelerate gradio

from diffusers import StableDiffusionPipeline
import torch
import gradio as gr
from IPython.display import Image, display
import random

# Load model (this will download files)
model_id = "runwayml/stable-diffusion-v1-5"
pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)
pipe = pipe.to("cuda")

def generate_image(
    prompt,
    negative_prompt="",
    steps=50,
    guidance_scale=7.5,
    width=512,
    height=512,
    seed=None
):
    # Set seed if provided or generate a random one
    if seed == "" or seed is None:
        seed = random.randint(0, 9999999999)
    else:
        try:
            seed = int(seed)
        except:
            seed = random.randint(0, 9999999999)

    generator = torch.Generator("cuda").manual_seed(seed)

    # Generate image
    with torch.autocast("cuda"):
        image = pipe(
            prompt,
            negative_prompt=negative_prompt if negative_prompt else None,
            num_inference_steps=steps,
            guidance_scale=guidance_scale,
            width=width,
            height=height,
            generator=generator
        ).images[0]

    # Save and return
    filename = "generated_image.png"
    image.save(filename)
    return image, seed

def generate_and_display(
    prompt,
    negative_prompt,
    steps,
    guidance_scale,
    width,
    height,
    seed
):
    # Generate the image
    image, used_seed = generate_image(
        prompt,
        negative_prompt,
        steps,
        guidance_scale,
        width,
        height,
        seed
    )

    # Return the image and used seed
    return image, f"Used seed: {used_seed}"

# Create the interface
with gr.Blocks(title="Stable Diffusion Image Generator") as demo:
    gr.Markdown("# üé® Stable Diffusion Image Generator")
    gr.Markdown("Create amazing images with AI!")

    with gr.Row():
        with gr.Column():
            prompt = gr.Textbox(label="Prompt", placeholder="Describe the image you want to generate...")
            negative_prompt = gr.Textbox(label="Negative Prompt", placeholder="What you don't want in the image...")

            with gr.Row():
                steps = gr.Slider(20, 100, value=50, step=1, label="Steps")
                guidance_scale = gr.Slider(1.0, 20.0, value=7.5, step=0.5, label="Guidance Scale")

            with gr.Row():
                width = gr.Slider(256, 1024, value=512, step=64, label="Width")
                height = gr.Slider(256, 1024, value=512, step=64, label="Height")

            seed = gr.Textbox(label="Seed (leave empty for random)", placeholder="Enter a number for reproducible results")
            generate_btn = gr.Button("Generate Image", variant="primary")

        with gr.Column():
            output_image = gr.Image(label="Generated Image")
            seed_info = gr.Textbox(label="Seed Info", interactive=False)

    generate_btn.click(
        fn=generate_and_display,
        inputs=[prompt, negative_prompt, steps, guidance_scale, width, height, seed],
        outputs=[output_image, seed_info]
    )

    gr.Markdown("### Tips:")
    gr.Markdown("- Use detailed prompts for better results")
    gr.Markdown("- Higher steps (50-100) = better quality but slower")
    gr.Markdown("- Guidance scale (7-10) works well for most cases")
    gr.Markdown("- Save your seed if you want to recreate the same image")

# Launch the Gradio interface
demo.launch(share=True)

"""‚ö†Ô∏è Challenges & Solutions
1. GPU Memory Limitations
Problem: Colab‚Äôs free-tier GPUs (T4) have limited VRAM (~15GB).

Solution:

Enabled FP16 mode (torch.float16)

Added attention slicing to reduce peak memory

Optional: Fallback to smaller models (e.g., stabilityai/stable-diffusion-2-1)

2. Slow Model Loading
Problem: Initial from_pretrained() download takes time.

Solution:

Cache the model in Colab‚Äôs runtime

Use accelerate for faster loading

3. Unwanted Artifacts in Images
Problem: Strange limbs, distorted faces, or blurry details.

Solution:

Strong negative prompts (e.g., "ugly, deformed, extra limbs")

Higher steps (50-70) for better refinement

Guidance scale tuning (7-10) for balanced results

4. Gradio Interface Freezing
Problem: Long generations cause timeouts.

Solution:

Progress indicators (gr.Progress() in future updates)

Timeout handling (retry mechanism)
"""
